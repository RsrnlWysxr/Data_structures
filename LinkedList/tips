1.	特征：
线性
真正的动态数据结构（最简单的）
更深入理解引用
更深入理解递归
辅助其他数据结构
丧失了随机访问的能力
不适合用于索引有语意的情况

2.	定义：
数据存储在“节点”中
clas  Node{
E e;
Node* next;		//最后节点 next 为 NULL
}

3.	添加元素
都是先创建，再添加

类中私有元素
private Node head;
private int size;

添加头节点 （逻辑不同在中间添加）
head = new Node (e,head);
size++;

中间添加：（逻辑：找到前一个节点）（顺序很重要）
node.next = prev.next
prev.next = node
==>  prev.next = new Node (e , prev.next)

4.	为链表设立虚拟头节点
虚拟头节点：元素为null，指向真正的头节点
初始化：dummyHead = new Node(null,null)
虚拟头节点将添加头节点和中间添加的逻辑等价
一个空节点，实际存在一个节点，就是虚拟头节点

5.	删除元素
与添加逻辑相反
寻找待删除之前的节点
prev.next = delNode.next;
delNode.next = null ;	//方便内存回收

6.	链表栈对比数组栈 性能更优 （差距不大）
由于数组有时要扩容，链表不存在扩容，因为链表是真正的动态数据
有时数组更优，由于链表每次需要new新头节点，系统会一直寻找可用空间

7.	链表队列
新建一个tail变量，指向链表尾部
即实现了两端操作
但从tail端删除元素不容易（不是双链表）
综上，head作队首，tail作队尾
没有dummyhead，要注意链表为空的情况
