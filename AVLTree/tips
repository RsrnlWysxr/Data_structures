AVL：
本质：二分搜索树
一种平衡二叉树 --> 避免树退化为链表
能够自平衡的二分搜索树
平衡二叉树：叶子节点高度差不大于1
高度和节点数量的关系也是O(log n)
AVL的平衡：任意一个节点，左子树和右子树的高度差不能超过1（宽松条件）
标注节点高度 -> 叶子节点高度为0   父节点看左右子树较高的子树高度，再加1
--> 平衡因子 = 左子树高度 - 右子树高度

判断是否为BST --> 中序遍历顺序排列

维护平衡：
时机：加入节点后，沿着节点向上维护平衡性	--> 递归实现
LL（右旋转）:
在不平衡的左侧再添加了节点，导致的不平衡，即 左倾斜
原先根节点顺时针（向右）旋转，现在根节点的右子树交给原先根节点，作左子树
旋转后更新height
RR（左旋转）：
在不平衡的右侧再添加了节点，导致的不平衡，即 右倾斜
原先根节点顺时针（向左）旋转，现在根节点的左子树交给原先根节点，作右子树
旋转后更新height
LR（左旋转 --> 右旋转）：
对中间节点进行左旋转 -->转换为LL --> 右旋转
RL（右旋转 --> 左旋转）：
对中间节点进行右旋转 --> 转换为RR --> 左旋转
