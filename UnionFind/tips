并查集：
孩子指向父亲
解决连接问题 --> 网络中节点间的连接状况
网络概念：抽象，用户间形成的网络
与路径问题相比，连接问题回答更少(bool)
数学中集合类的实现 -->求并集

对于一组数据，主要支持两个动作：
union(p,q)		//合并
isConnect(p,q)		//是否在同一集合(id是否相同)
find()	//找id

相当于每个数据有个id，id相同即为同一集合

求并集，将两个集合的id改为相同 --> 合并两个数 --> 相当于合并两个数所在的集合

将每一个元素，看作是一个节点
根节点自己指向自己

优化：
优化size --> 防止成为链表 --> 节点总数小的树 指向 节点总数大的树 --> union中优化

优化rank --> 深度优先 --> 深度低的 指向 深度高的 --> union中优化
实际rank并非深度，而是一种排序，不一定为深度，用于比较即可

路径压缩 --> 高树 压缩为 矮树 -->在find中优化
parent[p] = parent[parent[p]]
多调用几次，也能 直接指向根节点

递归路径压缩 -> 结果为 直接指向根节点  (递归存在开销，性能不如非递归的路径压缩)

时间复杂度：O(log *n) 
快于 O(log n)   -->  	近乎O(1)级别

