红黑树：
每个节点附着红色或者黑色
本质：二分搜索树
优势：添加、删除有优势，统计性能更优		//AVL 查、改有优势
红黑树与2-3树的等价性：
2-3树：
满足二分搜索树的基本性质
节点可以存放一个元素或者两个元素 --> 每个节点有2个孩子或者3个孩子
2-3树是一棵绝对平衡的树：从根节点到任意叶子节点，经过节点数相同
添加：永远不会到空的位置，放在叶子节点，先融合，超过2个元素，之后分裂子树
如果拆解后，变为不绝对平衡的树，则该节点和父节点融合，左孩子作融合后节点的
左子树，右子树作中间节点。新的父节点为四节点（3个元素），分裂，中间作父节点
红黑树：所有红色节点都是左倾斜的，代表和父节点融合
初始化节点，为红色 --> 代表2-3树中可融合的 --> 因为2-3树不能添加到空位置
保持“黑平衡”
严格意义上，也不是平衡二叉树，最大高度2logn（每过一个黑，就过一个红）

添加节点：
永远添加红色节点（融合）
保持根节点为黑色

向2节点添加元素(右倾)-->左旋转：对应3节点，不保证平衡，之后再处理，注意根节点颜色
不操作(左倾)

向3节点添加元素(右倾)-->颜色翻转：左右节点为黑，根节点为红
向3节点添加元素(左倾)--->右旋转：对应4节点，不保证平衡，之后再处理，注意根节点颜色
向3节点添加元素在中间：左旋转 --> 右旋转 --> 颜色翻转
维护时机：
添加节点后回溯向上维护
